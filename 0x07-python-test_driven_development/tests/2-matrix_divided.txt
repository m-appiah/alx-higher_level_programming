Matrix Division Usage

Module that defines a matrix division function ``matrix_divided(matrix, div)``.

::

>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
>>> matrix = [
...     [1, 2, 3],
...     [4, 5, 6]
... ]
>>> print(matrix_divided(matrix, 3))
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

NB: Quotients are rounded to a maximum of two decimal places.

::

>>> matrix = [
...             [3, 6, 9],
...             [12, 15, 18]
... ]
>>> print(matrix_divided(matrix, 3))
[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]


::


>>> matrix = [
...     [3, 2, 3],
...     [4, 9, -8]
... ]
>>> print(matrix_divided(matrix, 3))
[[1.0, 0.67, 1.0], [1.33, 3.0, -2.67]]

The function can also handle negative numbers.


::


>>> matrix = [
...     [3.2, 2.6, 0.3],
...     [4.1, 9.5, -8.7]
... ]
>>> print(matrix_divided(matrix, 3))
[[1.07, 0.87, 0.1], [1.37, 3.17, -2.9]]


The function can also handle floating-point numbers.


::


>>> matrix = [
...     [2, 2.6, 3],
...     [4.1, 9, -8.7]
... ]
>>> print(matrix_divided(matrix, 3))
[[0.67, 0.87, 1.0], [1.37, 3.0, -2.9]]

Works on the combination of integer, float and negative numbers


::

Invalid Matrices


>>> matrix = "string"
>>> print(matrix_divided(matrix, 3))
Traceback (most recent call last):
  ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

::

>>> matrix = NaN
Traceback (most recent call last):
  ...
NameError: name 'NaN' is not defined

::


>>> matrix = "NaN"
>>> print(matrix_divided(matrix, 3))
Traceback (most recent call last):
  ...
TypeError: matrix must be a matrix (list of lists) of integers/floats


::


>>> matrix = []
>>> print(matrix_divided(matrix, 3))
Traceback (most recent call last):
  ...
TypeError: Each row of the matrix must have the same size


::

Empty list of list works


>>> matrix = [[]]
>>> print(matrix_divided(matrix, 3))
[[]]


::

All rows in ``matrix`` must be the same size. If any rows are
of different sizes, a new TypeError is raised.


>>> matrix = [4, 2, 5]
>>> print(matrix_divided(matrix, 3))
Traceback (most recent call last):
  ...
TypeError: matrix must be a matrix (list of lists) of integers/floats


::

TypeError is raised if any elements in matrix are
neither ints nor floats.


>>> matrix = [
...     ["s", 2, 3],
...     [4, "c", 6]
... ]
>>> print(matrix_divided(matrix, 3))
Traceback (most recent call last):
  ...
TypeError: matrix must be a matrix (list of lists) of integers/floats


::


>>> matrix = [
...     [1, 2, 3, 7],
...     [4, 5, 6]
... ]
>>> print(matrix_divided(matrix, 3))
Traceback (most recent call last):
  ...
TypeError: Each row of the matrix must have the same size


::

The parameter ``div`` must be either an int or float. Otherwise, a TypeError is raised.

>>> matrix = [
...     [1, 2, 3],
...     [4, 5, 6]
... ]
>>> print(matrix_divided(matrix, "c"))
Traceback (most recent call last):
  ...
TypeError: div must be a number


::


>>> matrix = [
...     [1, 2, 3],
...     [4, 5, 6]
... ]
>>> print(matrix_divided(matrix, "c"))
Traceback (most recent call last):
  ...
TypeError: div must be a number


::

``div`` must also be non-zero. Otherwise, a ZeroDivisionError is raised.


>>> matrix = [
...     [1, 2, 3],
...     [4, 5, 6]
... ]
>>> print(matrix_divided(matrix, 0))
Traceback (most recent call last):
  ...
ZeroDivisionError: division by zero


::


>>> matrix = [
...     [1, 2, 3],
...     [4, 5, 6]
... ]
>>> print(matrix_divided(matrix, None))
Traceback (most recent call last):
  ...
TypeError: div must be a number
